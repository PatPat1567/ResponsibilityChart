@page "/ManageResponsibilities" 

<h1>Manage Responsibilities</h1>
<button @onclick="@(() => CreateResponsibility())">
  <span class="oi oi-plus" aria-hidden="true">Add New Responsibility</span>
</button>
<Table TableItem="Responsibility" Items="data" PageSize="10" >
  <Column TableItem="Responsibility" Title="Actions" Field="@(x => x.Id)" Sortable="false" Filterable="false" >
    <Template Context="ResponsibilityContext">
      <button @onclick="@(() => EditResponsibility(ResponsibilityContext))">
        <span class="oi oi-pencil" aria-hidden="true"></span>
      </button>
      <button @onclick="@(() => DeleteResponsibility(ResponsibilityContext))">
        <span class="oi oi-trash" aria-hidden="true"></span>
      </button>
    </Template>
  </Column>
  <Column TableItem="Responsibility" Title="Id" Field="@(x => x.Id)" Sortable="true" Filterable="false" />
  <Column TableItem="Responsibility" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="false" />
  <Column TableItem="Responsibility" Title="Recommended Age Group" Field="@(x => x.RecommendedAgeGroups)" Sortable="true" Filterable="false" >
    <Template>
      <ul>
        @foreach(var ageGroup in context.RecommendedAgeGroups)
        {
          <li>@(Regex.Replace(ageGroup.ToString(), "([a-z])([A-Z])", "$1 $2"))</li>
        }
      </ul>
    </Template>
  </Column>
  <Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true" />
</Table>


@code {
  [CascadingParameter]
  public IModalService Modal { get; set; }

  private IList<Responsibility> data { get; set;}

  protected override Task OnInitializedAsync()
  {
    data = new List<Responsibility>() {
      new Responsibility() 
      {
        Id=1, 
        Name = "Clean Bedroom",
        RecommendedAgeGroups = new List<AgeGroup> {AgeGroup.ThreeToFour, AgeGroup.FiveToEight, AgeGroup.EightToTwelve, AgeGroup.ThirteenPlus}
      }
    };
    return base.OnInitializedAsync();
  }

  private async Task CreateResponsibility()
  {
    var AddResponsibilityModal = Modal.Show(typeof(AddEditResponsibility), "Add Responsibility");
    var result = await AddResponsibilityModal.Result;
    if (result.DataType == typeof(Responsibility))
    {
      data.Add((Responsibility)result.Data);
    }
  }
  private async Task EditResponsibility(Responsibility responsibility)
  {
    var parameters = new ModalParameters();
    parameters.Add("Responsibility", responsibility);
    var EditResponsibilityModal = Modal.Show(typeof(AddEditResponsibility), "Edit Responsibility", parameters);
    var result = await EditResponsibilityModal.Result;
    if (result.DataType == typeof(Responsibility))
    {
      var elementNumber = data.IndexOf(responsibility);
      if (elementNumber != -1)
      {
        data[elementNumber] = (Responsibility)result.Data;
      }
    }
  }
  private async Task DeleteResponsibility(Responsibility responsibility)
  {
    var parameters = new ModalParameters();
    parameters.Add("Responsibility", responsibility);
    var DeleteResponsibilityModal = Modal.Show(typeof(DeleteResponsibility), "Delete Responsibility", parameters);
    var result = await DeleteResponsibilityModal.Result;
    if (!result.Cancelled)
    {
      data.Remove(responsibility);
    }
  }
}