@page "/ManageChildren"

<h1>Manage Children</h1>
<button @onclick="@(() => CreateChild())">
  <span class="oi oi-plus" aria-hidden="true">Add New Child</span>
</button>
<Table TableItem="Child" Items="data" PageSize="10" >
  <Column TableItem="Child" Title="Actions" Field="@(x => x.Id)" Sortable="false" Filterable="false" >
    <Template Context="ChildContext">
      <button @onclick="@(() => EditChild(ChildContext.Id))">
        <span class="oi oi-pencil" aria-hidden="true"></span>
      </button>
      <button @onclick="@(() => DeleteChild(ChildContext.Id))">
        <span class="oi oi-trash" aria-hidden="true"></span>
      </button>
    </Template>
  </Column>
  <Column TableItem="Child" Title="Id" Field="@(x => x.Id)" Sortable="true" Filterable="false" />
  <Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true" />
</Table>


@code {
  [CascadingParameter]
  public IModalService Modal { get; set; }

  private IEnumerable<Child> data { get; set;}

  protected override Task OnInitializedAsync()
  {
    data = new List<Child>() {
      new Child() {Id=1}
      };
      return base.OnInitializedAsync();
  }

  private void CreateChild()
  {
    var AddChildModal = Modal.Show(typeof(AddEditChild), "Add Child");
  }
  private void EditChild(int id)
  {
    var parameters = new ModalParameters();
    parameters.Add("Child", id);
    var EditChildModal = Modal.Show(typeof(AddEditChild), "Edit Child", parameters);
  }
  private void DeleteChild(int id)
  {
    var parameters = new ModalParameters();
    parameters.Add("Child", id);
    var DeleteChildModal = Modal.Show(typeof(DeleteChild), "Remove Child", parameters);
  }
}