@page "/ManageChildren"

<h1>Manage Children</h1>
<button @onclick="@(() => CreateChild())">
  <span class="oi oi-plus" aria-hidden="true">Add New Child</span>
</button>
<Table TableItem="Child" Items="data" PageSize="10" >
  <Column TableItem="Child" Title="Actions" Field="@(x => x.Id)" Sortable="false" Filterable="false" >
    <Template Context="ChildContext">
      <button @onclick="@(() => EditChild(ChildContext))">
        <span class="oi oi-pencil" aria-hidden="true"></span>
      </button>
      <button @onclick="@(() => DeleteChild(ChildContext))">
        <span class="oi oi-trash" aria-hidden="true"></span>
      </button>
    </Template>
  </Column>
  <Column TableItem="Child" Title="Id" Field="@(x => x.Id)" Sortable="true" Filterable="false" />
  <Column TableItem="Child" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="false" />
  <Column TableItem="Child" Title="Date Of Birth" Field="@(x => x.DateOfBirth)" Sortable="true" Filterable="false" >
    <Template>
      @if (context.DateOfBirth.HasValue)
      {
        @context.DateOfBirth.Value.ToShortDateString();
      }
    </Template>
  </Column>
  <Column TableItem="Child" Title="Gender" Field="@(x => x.Gender)" Sortable="true" Filterable="false" >
    <Template>
      @if(context.Gender.HasValue)
      {
        @(Regex.Replace(context.Gender.Value.ToString(), "([a-z])([A-Z])", "$1 $2"));
      }
    </Template>
  </Column>
  <Pager ShowPageNumber="true" ShowTotalCount="true" ShowPageSizes="true" />
</Table>


@code {
  [CascadingParameter]
  public IModalService Modal { get; set; }

  private IEnumerable<Child> data { get; set;}

  protected override Task OnInitializedAsync()
  {
    data = new List<Child>() {
      new Child() 
      { 
        Id = Guid.NewGuid() ,
        Name = "Example Child",
        DateOfBirth = new DateTime(),
        Gender = Gender.NonBinary
      }
    };
    return base.OnInitializedAsync();
  }

  private void CreateChild()
  {
    var AddChildModal = Modal.Show(typeof(AddEditChild), "Add Child");
  }
  private void EditChild(Child child)
  {
    var parameters = new ModalParameters();
    parameters.Add("Child", child);
    var EditChildModal = Modal.Show(typeof(AddEditChild), "Edit Child", parameters);
  }
  private void DeleteChild(Child child)
  {
    var parameters = new ModalParameters();
    parameters.Add("Child", child);
    var DeleteChildModal = Modal.Show(typeof(DeleteChild), "Remove Child", parameters);
  }
}